dim(OmnipathPTMs)
OmnipathInteractions <- import_Omnipath_Interactions() %>%
dplyr::filter(consensus_stimulation != 0 | consensus_inhibition != 0)  %>%
dplyr::mutate(sign = if_else(consensus_stimulation==1,1,-1)) %>%
dplyr::select(source_genesymbol, sign,  target_genesymbol) %>%
dplyr::rename(source ="source_genesymbol", target ="target_genesymbol")
OmnipathPTMs <- import_Omnipath_PTMS() %>%
dplyr::filter(modification %in%
c("dephosphorylation","phosphorylation")) %>%
dplyr::mutate(GeneResidue = paste(substrate_genesymbol,(paste0(residue_type,
residue_offset)), sep = "_")) %>%
dplyr::mutate(sign = ifelse(modification == "phosphorylation",1,-1))  %>%
dplyr::select(enzyme_genesymbol,sign, GeneResidue) %>%
dplyr::rename(source = "enzyme_genesymbol", target = "GeneResidue") %>%
dplyr::distinct()
CarnivalNetwork <- dplyr::bind_rows(OmnipathInteractions, KSN_PDTs) %>%
dplyr::distinct()
CarnivalNetwork$target <- gsub("[/]","_",CarnivalNetwork$target)
CarnivalNetwork$target <- gsub("[space]","_",CarnivalNetwork$target)
CarnivalNetwork$source <- gsub("[-]", "_", CarnivalNetwork$source)
CarnivalNetwork$target <- gsub("[-]", "_", CarnivalNetwork$target)
CarnivalNetwork$source <- gsub(pattern = "/", replacement = "_",
x = CarnivalNetwork$source, fixed = TRUE)
CarnivalNetwork$source <- gsub(pattern = " ", replacement = "_",
x = CarnivalNetwork$source, fixed = TRUE)
CarnivalNetwork$target <- gsub(pattern = "/", replacement = "_",
x = CarnivalNetwork$target, fixed = TRUE)
CarnivalNetwork$target <- gsub(pattern = " ", replacement = "_",
x = CarnivalNetwork$target, fixed = TRUE)
CarnivalNetwork_igraph <-
graph_from_data_frame(CarnivalNetwork[,c(1,3)], directed = TRUE) %>%
getgcc() %>%
igraph::as_data_frame()
CarnivalNetwork_gcc <- dplyr::semi_join(CarnivalNetwork,CarnivalNetwork_igraph,
by = c("source" = "from", "target" = "to")) %>%
dplyr::distinct()
dim(CarnivalNetwork_gcc)
head(CarnivalNetwork_gcc)
dim(CarnivalNetwork_gcc)
dim(CarnivalNetwork)
ResultsLinearModel <- read_tsv("Data/limma_model_results_20190301.tsv")
LinearModelData_df <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
LinearModelData_LNCaP_noInhib_t1_EGF <- LinearModelData_df %>%
dplyr::filter(term == "LNCaP_noInhib_t1_EGF") %>%
dplyr::filter(p.value < 0.05)  %>%
dplyr::select(GeneSymbol_Residue, statistic, p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::filter(p.value == min(p.value))  %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::filter(GeneSymbol_Residue %in% CarnivalNetwork_gcc$target) %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.data.frame()
head(LinearModelData_LNCaP_noInhib_t1_EGF)
allD
allD$S.cc
KSN_mouse_uniprot <- read_delim("KSN_mouse_uniprot", "\t", escape_double = FALSE, trim_ws = TRUE)
KSN_mouse_uniprot
omnipath_mouse
omnipath_mouse$Category
table(omnipath_mouse$Category)
KSN_mouse_uniprot
mappingTable
colnames(mappingTable) <- c("Uniprot", "Gene")
mappingTable[, 1] <- c(omnipath_mouse$UniProt_A, omnipath_mouse$UniProt_B)
mappingTable[, 2] <- c(omnipath_mouse$GeneSymbol_A, omnipath_mouse$GeneSymbol_B)
mappingTable <- unique(mappingTable)
mappingTable
speciesKSN
head(allD)
allD$SID
allD$S.AC
allD$S.ID
allD$S.AD
allD$SID
allD$S.cc
grep(allD$S.cc)
?grep
grep("_", allD$S.cc)
grepl("_", allD$S.cc)
!grepl("_", allD$S.cc)
sum(!grepl("_", allD$S.cc))
head()
head(allD)
dplyr::filter(allD, S.ID =="Pdgfr")
toBind
allD
head(allD)
dplyr::filter(allD, S.ID =="Pdgfr")
dplyr::filter(allD, S.ID =="kras")
dplyr::filter(allD, K.ID =="kras")
dplyr::filter(allD, K.ID =="Kras")
dplyr::filter(allD, S.ID =="Kras")
dplyr::filter(allD, K.ID =="Pdgfr")
head(OmnipathInteractions)
dataInput
dataInput@IDmap
dataInput@res
head(dataInput@res)
tableTopList
ttop_list
ttop_list$PDGF_3min
OmnipathInteractionsCarni <- OmnipathInteractions %>%
dplyr::filter(consensus_stimulation != 0 | consensus_inhibition != 0)  %>%
dplyr::mutate(sign = 1) %>%
dplyr::select(source_genesymbol, sign,  target_genesymbol) %>%
dplyr::rename(source ="source_genesymbol", target ="target_genesymbol")
## Omnipath Interactions
OmnipathInteractions <- import_Omnipath_Interactions()
OmnipathInteractionsCarni <- OmnipathInteractions %>%
dplyr::filter(consensus_stimulation != 0 | consensus_inhibition != 0)  %>%
dplyr::mutate(sign = 1) %>%
dplyr::select(source_genesymbol, sign,  target_genesymbol) %>%
dplyr::rename(source ="source_genesymbol", target ="target_genesymbol")
head(OmnipathInteractionsCarni)
### Script to compare Phonemes and Carnival.
## First Only one time point!
library(CARNIVAL)
library(OmnipathR)
library(dplyr)
library(readr)
library(bc3net)
library(PHONEMeS)
# range <- function(x){ (x - min(x))/(max(x)-min(x)) * (1 - (-1)) + -1 }
## The fisrt thing we have to consider is that Phonemes consider all the
## interactions as positive. In order to do a fair comparison, we consider
## in CARNIVAL all the interactions as positive.
## Omnipath Interactions
OmnipathInteractions <- import_Omnipath_Interactions()
OmnipathInteractionsCarni <- OmnipathInteractions %>%
dplyr::filter(consensus_stimulation != 0 | consensus_inhibition != 0)  %>%
# dplyr::mutate(sign = ifelse(modification == "phosphorylation",1,-1)) %>%
dplyr::mutate(sign = 1) %>%
dplyr::select(source_genesymbol, sign,  target_genesymbol) %>%
dplyr::rename(source ="source_genesymbol", target ="target_genesymbol")
## Omnipath PTMs
OmnipathPTMs <- import_Omnipath_PTMS()
OmnipathPTMsCarni <- OmnipathPTMs %>%
dplyr::filter(modification %in%
c("dephosphorylation","phosphorylation")) %>%
dplyr::mutate(GeneResidue = paste(substrate_genesymbol,(paste0(residue_type,
residue_offset)), sep = "_")) %>%
# dplyr::mutate(sign = ifelse(modification == "phosphorylation",1,-1))  %>%
dplyr::mutate(sign = 1)  %>%
dplyr::select(enzyme_genesymbol,sign, GeneResidue) %>%
dplyr::rename(source = "enzyme_genesymbol", target = "GeneResidue") %>%
dplyr::distinct()
## We merge them
CarnivalNetwork <-
dplyr::bind_rows(OmnipathInteractionsCarni, OmnipathPTMsCarni) %>%
dplyr::distinct()
## We remove some characters that CPLEX cannot deal with.
CarnivalNetwork$target <- gsub("[/]","_",CarnivalNetwork$target)
CarnivalNetwork$target <- gsub("[space]","_",CarnivalNetwork$target)
CarnivalNetwork$source <- gsub("[-]", "_", CarnivalNetwork$source)
CarnivalNetwork$target <- gsub("[-]", "_", CarnivalNetwork$target)
CarnivalNetwork$source <- gsub(pattern = "/", replacement = "_",
x = CarnivalNetwork$source, fixed = TRUE)
CarnivalNetwork$source <- gsub(pattern = " ", replacement = "_",
x = CarnivalNetwork$source, fixed = TRUE)
CarnivalNetwork$target <- gsub(pattern = "/", replacement = "_",
x = CarnivalNetwork$target, fixed = TRUE)
CarnivalNetwork$target <- gsub(pattern = " ", replacement = "_",
x = CarnivalNetwork$target, fixed = TRUE)
CarnivalNetwork_igraph <-
graph_from_data_frame(CarnivalNetwork[,c(1,3)], directed = TRUE) %>%
getgcc() %>%
igraph::as_data_frame()
CarnivalNetwork_gcc <- dplyr::semi_join(CarnivalNetwork,CarnivalNetwork_igraph,
by = c("source" = "from", "target" = "to")) %>%
dplyr::distinct()
dim(CarnivalNetwork_gcc)
dim(CarnivalNetwork)
ResultsLinearModel <- read_tsv("Data/limma_model_results_20190301.tsv")
LinearModelData_df <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
LinearModelData_LNCaP_noInhib_t1_EGF <- LinearModelData_df %>%
dplyr::filter(term == "LNCaP_noInhib_t1_EGF") %>%
dplyr::filter(p.value < 0.05)  %>%
dplyr::select(GeneSymbol_Residue, statistic, p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::filter(p.value == min(p.value))  %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::filter(GeneSymbol_Residue %in% CarnivalNetwork_gcc$target) %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.data.frame()
head(LinearModelData_LNCaP_noInhib_t1_EGF)
allD
View(allD)
colnames(OmnipathInteractions)
OmnipathInteractionsPhonemes <- OmnipathInteractions %>%
dplyr::filter(consensus_stimulation != 0 | consensus_inhibition != 0)  %>%
dplyr::select(target, target_genesymbol, source_genesymbol,
target_genesymbol) %>%
dplyr::rename(S.AC = "target", S.ID = "target_genesymbol",
K.AC = "source", K.ID = "source_genesymbol")
OmnipathInteractionsPhonemes <- OmnipathInteractions %>%
dplyr::filter(consensus_stimulation != 0 | consensus_inhibition != 0)  %>%
dplyr::select(target, target_genesymbol, source, source_genesymbol) %>%
dplyr::rename(S.AC = "target", S.ID = "target_genesymbol",
K.AC = "source", K.ID = "source_genesymbol")
head(OmnipathInteractionsPhonemes)
class(allD$pos)
?transmute
OmnipathInteractionsPhonemes <- OmnipathInteractions %>%
dplyr::filter(consensus_stimulation != 0 | consensus_inhibition != 0)  %>%
dplyr::select(target, target_genesymbol, source, source_genesymbol) %>%
dplyr::rename(S.AC = "target", S.ID = "target_genesymbol",
K.AC = "source", K.ID = "source_genesymbol") %>%
tibble::add_column(res = "R", pos = "1")
head(OmnipathInteractionsPhonemes)
?fgsea
library(fgsea)
data(examplePathways)
data(exampleRanks)
examplePathways
exampleRanks
fgseaRes1 <- fgsea(examplePathways[1], exampleRanks, nperm=10000)
fgseaRes1
pathways
examplePathways
?getGmt
sewd("/home/alvaldeolivas/Documents/GitHub/Saezlab/Covid19/")
setwd("/home/alvaldeolivas/Documents/GitHub/Saezlab/Covid19/")
GSC <- GSEABase::getGmt("RawData/HALLMARK_G2M_CHECKPOINT.gmt") # src: MsigDB
GSC
G2M <- GSEABase::getGmt("RawData/HALLMARK_G2M_CHECKPOINT.gmt") # src: MsigDB
G2M <- GSEABase::getGmt("RawData/HALLMARK_G2M_CHECKPOINT.gmt") # src: MsigDB
CellCycleArrest <- GSEABase::getGmt("RawData/GO_CELL_CYCLE_ARREST.gmt")
CellCycle <- GSEABase::getGmt("RawData/KEGG_CELL_CYCLE.gmt")
exampleRanks
head(exampleRanks)
?fgsea
## We read the stasts from the tests.
dds_results_NHBEvsCOV2 <-
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds")
dds_results_A549vsCOV2 <-
readRDS("IntermediateFiles/dds_results_A549vsCOV2.rds")
dim(dds_results_NHBEvsCOV2)
heaD(dds_results_NHBEvsCOV2)
head(dds_results_NHBEvsCOV2)
## We read the stasts from the tests.
dds_results_NHBEvsCOV2 <-
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
dplyr::filter(!is.na(stat))
dds_results_NHBEvsCOV2
head(dds_results_NHBEvsCOV2)
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
dds_results_NHBEvsCOV2 <-
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
>
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
<
dds_results_NHBEvsCOV2 <-
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame()
dds_results_NHBEvsCOV2
## We read the stasts from the tests.
dds_results_NHBEvsCOV2 <-
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "GeneID") %>%
dplyr::filter(!is.na(stat)) %>%
dplyr::select(GeneID, stat)
dds_results_NHBEvsCOV2
?pull
## We read the stasts from the tests.
dds_results_NHBEvsCOV2 <-
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "GeneID") %>%
dplyr::filter(!is.na(stat)) %>%
dplyr::select(GeneID, stat) %>%
tibble::column_to_rownames(var = "GeneID")
dds_results_NHBEvsCOV2
## We read the stasts from the tests.
dds_results_NHBEvsCOV2 <-
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "GeneID") %>%
dplyr::filter(!is.na(stat)) %>%
dplyr::select(GeneID, stat) %>%
tibble::column_to_rownames(var = "GeneID") %>%
pull()
dds_results_NHBEvsCOV2
## We read the stasts from the tests.
dds_results_NHBEvsCOV2 <-
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "GeneID") %>%
dplyr::filter(!is.na(stat)) %>%
dplyr::select(GeneID, stat) %>%
tibble::column_to_rownames(var = "GeneID") %>%
as.vector()
dds_results_NHBEvsCOV2
head(dds_results_NHBEvsCOV2)
clasS(dds_results_NHBEvsCOV2)
class(dds_results_NHBEvsCOV2)
## We read the stasts from the tests.
dds_results_NHBEvsCOV2 <-
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "GeneID") %>%
dplyr::filter(!is.na(stat)) %>%
dplyr::select(GeneID, stat) %>%
tibble::column_to_rownames(var = "GeneID")
Ranks_NHBEvsCOV2 <- dds_results_NHBEvsCOV2$stat
names(Ranks_NHBEvsCOV2) <- rownames(dds_results_NHBEvsCOV2)
Ranks_NHBEvsCOV2
fgseaRes_G2M <- fgsea(G2M, exampleRanks, nperm=10000)
fgseaRes_G2M <- fgsea(G2M, Ranks_NHBEvsCOV2, nperm=10000)
fgseaRes_CellCycleArrest  <- fgsea(CellCycleArrest, exampleRanks, nperm=10000)
fgseaRes_CellCycleArrest  <- fgsea(example(1), exampleRanks, nperm=10000)
?fgsea
fgseaRes_CellCycleArrest  <-fgseaRes1 <- fgsea(examplePathways[1], exampleRanks, nperm=10000)
Ranks_NHBEvsCOV2
class(Ranks_NHBEvsCOV2)
class(exampleRanks)
examplePathways[1]
G2M
?getGmt
GSEABase::GeneIds(GSC)
GSEABase::GeneIds(G2M)
?loadGSC
fgseaRes_G2M <- fgsea(piano::loadGSC(G2M), Ranks_NHBEvsCOV2, nperm=10000)
?fgsea
fgsea
G2M
?getGmt
G2M
G2M@.Data
G2M[[1]]
G2M[[1]]@geneIds
?GeneIds
?GSEABase
fgseaRes_G2M <- fgsea(geneIds(G2M), Ranks_NHBEvsCOV2, nperm=10000)
?geneIds
fgseaRes_G2M <- fgsea(GSEABase::geneIds(G2M), Ranks_NHBEvsCOV2, nperm=10000)
fgseaRes_G2M
fgseaRes_CellCycle  <-
fgsea(GSEABase::geneIds(CellCycle), Ranks_NHBEvsCOV2, nperm=10000)
fgseaRes_CellCycle
fgseaRes_CellCycleArrest  <-
fgsea(GSEABase::geneIds(CellCycleArrest), Ranks_NHBEvsCOV2, nperm=10000)
fgseaRes_CellCycleArrest
fgseaRes_CellCycleArrest$leadingEdge
fgseaRes_G2M
?fgsea
G2M
?GeneSetCollection
GeneSetCollection(G2M,CellCycle,CellCycleArrest)
signature(G2M,CellCycle,CellCycleArrest)
?geneIds
union(G2M,CellCycle,CellCycleArrest)
G2M
union(G2M,CellCycle,CellCycleArrest)
union(G2M,CellCycle)
CellCycleArrest
dds_results_A549vsCOV2 <-
readRDS("IntermediateFiles/dds_results_A549vsCOV2.rds") %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "GeneID") %>%
dplyr::filter(!is.na(stat)) %>%
dplyr::select(GeneID, stat) %>%
tibble::column_to_rownames(var = "GeneID")
Ranks_A549vsCOV2 <- dds_results_A549vsCOV2$stat
names(Ranks_A549vsCOV2) <- rownames(dds_results_A549vsCOV2)
fgseaRes_G2M <-
fgsea(GSEABase::geneIds(G2M), Ranks_A549vsCOV2, nperm=10000)
fgseaRes_CellCycle  <-
fgsea(GSEABase::geneIds(CellCycle), Ranks_A549vsCOV2, nperm=10000)
fgseaRes_CellCycleArrest  <-
fgsea(GSEABase::geneIds(CellCycleArrest), Ranks_A549vsCOV2, nperm=10000)
fgseaRes_G2M
fgseaRes_CellCycle
fgseaRes_CellCycleArrest
library(ggplot2)
library(scales)
# set up an example dataset (see ?lmFit)
sd <- 0.3*sqrt(4/rchisq(100,df=4))
y <- matrix(rnorm(100*6,sd=sd),100,6)
rownames(y) <- paste("Gene",1:100)
y[1:2,4:6] <- y[1:2,4:6] + 2
design <- cbind(Grp1=1,Grp2vs1=c(0,0,0,1,1,1))
options(digits=3)
# Ordinary fit
fit <- lmFit(y,design)
fit <- eBayes(fit)
tt <- topTable(fit,coef=2, n = Inf)
# transformation function for reverse log1p axis
revlog_trans <- function(base = exp(1)) {
trans <- function(x) -log1p(x)
inv <- function(x) expm1(-x)
scales::trans_new("revlog1p", trans, inv, domain = c(0, Inf))
}
ggplot(tt, aes(x = logFC, y = P.Value)) +
scale_fill_gradient(low = "lightgray", high = "navy") +
scale_color_gradient(low = "lightgray", high = "navy") +
scale_y_continuous(trans = revlog_trans(), expand = c(0.005, 0.005)) +
expand_limits(y = c(0, 1)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon",
show.legend = FALSE) +
geom_point(data = subset(tt, P.Value < 0.05),
color = "red", alpha = 0.5) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_hline(yintercept = 0.05, linetype = "dashed") +
geom_vline(xintercept = c(-1, 1), linetype = "dashed") +
theme_linedraw() +
theme(panel.grid = element_blank()) +
xlab("Fold change (log2)") +
ylab("P-Value") +
annotate("text", x = min(tt$logFC), y = 1,
label = "Nominally significant",
color = "black", hjust = 0) +
annotate("point", x = min(tt$logFC) - 0.05, y = 1, color = "red")
p <- ggplot(tt, aes(x = logFC, y = P.Value)) +
scale_fill_gradient(low = "lightgray", high = "navy") +
scale_color_gradient(low = "lightgray", high = "navy") +
scale_y_continuous(trans = revlog_trans(), expand = c(0.005, 0.005)) +
expand_limits(y = c(0, 1)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon",
show.legend = FALSE) +
geom_point(data = subset(tt, P.Value < 0.05),
color = "red", alpha = 0.5) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_hline(yintercept = 0.05, linetype = "dashed") +
geom_vline(xintercept = c(-1, 1), linetype = "dashed") +
theme_linedraw() +
theme(panel.grid = element_blank()) +
xlab("Fold change (log2)") +
ylab("P-Value") +
annotate("text", x = min(tt$logFC), y = 1,
label = "Nominally significant",
color = "black", hjust = 0) +
annotate("point", x = min(tt$logFC) - 0.05, y = 1, color = "red")
p
plot(p)
p
volcano_nice()
?volcano_nice(0)
?volcano_nice()
View(volcano_nice)
fgseaRes_G2M_NHBE
### Investigate cell cycle things.
library(fgsea)
data(examplePathways)
data(exampleRanks)
setwd("/home/alvaldeolivas/Documents/GitHub/Saezlab/Covid19/")
## We read pathways from MsigDb
G2M <- GSEABase::getGmt("RawData/HALLMARK_G2M_CHECKPOINT.gmt") # src: MsigDB
CellCycle <- GSEABase::getGmt("RawData/KEGG_CELL_CYCLE.gmt")
CellCycleArrest <- GSEABase::getGmt("RawData/GO_CELL_CYCLE_ARREST.gmt")
## NHBE cell line
## We read the stasts from the tests.
dds_results_NHBEvsCOV2 <-
readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "GeneID") %>%
dplyr::filter(!is.na(stat)) %>%
dplyr::select(GeneID, stat) %>%
tibble::column_to_rownames(var = "GeneID")
Ranks_NHBEvsCOV2 <- dds_results_NHBEvsCOV2$stat
names(Ranks_NHBEvsCOV2) <- rownames(dds_results_NHBEvsCOV2)
fgseaRes_G2M_NHBE <-
fgsea(GSEABase::geneIds(G2M), Ranks_NHBEvsCOV2, nperm=10000)
fgseaRes_CellCycle_NHBE  <-
fgsea(GSEABase::geneIds(CellCycle), Ranks_NHBEvsCOV2, nperm=10000)
fgseaRes_CellCycleArrest_NHBE  <-
fgsea(GSEABase::geneIds(CellCycleArrest), Ranks_NHBEvsCOV2, nperm=10000)
fgseaRes_CellCycleArrest_NHBE
clasS(fgseaRes_CellCycleArrest_NHBE)
class(fgseaRes_CellCycleArrest_NHBE)
Enrichment_resultsNHBE <- bind_rows(fgseaRes_G2M_NHBE,
fgseaRes_CellCycle_NHBE,fgseaRes_CellCycleArrest_NHBE)
Enrichment_resultsNHBE
clasS(Enrichment_resultsNHBE)
class(Enrichment_resultsNHBE)
Enrichment_resultsNHBE <- as.data.frame(bind_rows(fgseaRes_G2M_NHBE,
fgseaRes_CellCycle_NHBE,fgseaRes_CellCycleArrest_NHBE) )
Enrichment_resultsNHBE
?stat_function
a <- ggplot(Enrichment_resultsNHBE, aes(x = NES, y = -log(padj),
color = couleur)) + geom_point(alpha = 0.5) +
stat_function(fun = xneg, xlim = c(-xlimAbs, -vAss),
color = "black", alpha = 0.7) + ylim(c(0, ylimAbs)) +
xlim(c(-xlimAbs, xlimAbs)) + stat_function(fun = xpos,
xlim = c(vAss, xlimAbs), color = "black", alpha = 0.7) +
scale_colour_manual(values = c("grey30", "red", "royalblue3")) +
theme_minimal() +
theme(legend.position = "none")
a <- ggplot(Enrichment_resultsNHBE, aes(x = NES, y = -log(padj),
color = couleur)) + geom_point(alpha = 0.5)
a
a <- ggplot(Enrichment_resultsNHBE, aes(x = NES, y = -log(padj))) +
geom_point(alpha = 0.5)
a
