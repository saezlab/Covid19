lo$setCellTypeNumber(4)
lo$project("full")
lo$projectionPlot(color="filtered")
lo$project("filtered")
lo$smartSearchCorners(dataset="filtered", error="norm")
lo$deconvolveByEndpoints()
plotProportions(lo$proportions)
realFractions$sample
tidyproportions = lo$proportions %>% as.data.frame %>% rownames_to_column("celltype") %>%
gather(key= "Sample", value = "cell_proportion", -celltype)
tidyproportions
head(realFractions)
0.181 + 0.325 + 0.467 + 0.0579
realFractions %>% dplyr::filter(cell_type = "B cell")
realFractions %>% dplyr::filter(cell_type == "B cell")
realFractions %>% dplyr::filter(cell_type == "B cell") %>% pull(true_fraction) %>% sum()
realFractions %>% dplyr::filter(sample == "LAU125") %>% pull(true_fraction) %>% sum()
tidyproportions = lo$proportions %>% as.data.frame %>% rownames_to_column("celltype") %>%
gather(key= "sample", value = "cell_proportion", -celltype) %>%
left_join(realFractions)
tidyproportions
realFractions
realFractions <- immunedeconv::dataset_racle$ref %>%
dplyr::select(sample, true_fraction)
tidyproportions = lo$proportions %>% as.data.frame %>% rownames_to_column("celltype") %>%
gather(key= "sample", value = "cell_proportion", -celltype) %>%
left_join(realFractions)
tidyproportions
lo$proportions
dim(lo$proportions)
tidyproportions = lo$proportions %>% as.data.frame %>% rownames_to_column("celltype") %>%
gather(key= "sample", value = "cell_proportion", -celltype)
tidyproportions
dim(realFractions)
sum(tidyproportions$cell_proportion)
head(eset)
realFractions <- immunedeconv::dataset_racle$ref
realFractions
expr = matrix(c(
rep(c(1,0,0), 300),
rep(c(0,1,0), 300),
rep(c(0,0,1), 300)), nrow=3)
expr
dim(expr)
gene_names = c("CD8A", "CD4", "CD19")
rownames(expr) = gene_names
cell_types = c(rep("T cell CD8+", 300), rep("T cell CD4+", 300), rep("B cell", 300))
pdata = data.frame(cell_type=cell_types)
fdata = data.frame(gene_symbol=gene_names)
rownames(fdata) = gene_names
eset = ExpressionSet(expr, phenoData=as(pdata, "AnnotatedDataFrame"),
featureData=as(fdata, "AnnotatedDataFrame"))
eset
pdata
head(pdata)
tail(pdata)
fdata = data.frame(gene_symbol=gene_names)
fdata
desired_cell_fractions = tibble("T cell CD8+"=c(0.1, 0.2, 0.3),
"T cell CD4+"=c(0.9, 0.7, 0.5),
"B cell"=c(0, 0.1, 0.2))
new_eset = make_bulk_eset(eset, desired_cell_fractions, n_cells=500)
exprs(new_eset)
library(immunedeconv)
desired_cell_fractions = tibble("T cell CD8+"=c(0.1, 0.2, 0.3),
"T cell CD4+"=c(0.9, 0.7, 0.5),
"B cell"=c(0, 0.1, 0.2))
desired_cell_fractions
new_eset = make_bulk_eset(eset, desired_cell_fractions, n_cells=500)
exprs(new_eset)
immunedeconv::deconvolute(gene_expression_matrix, "quantiseq")
gene_expression_matrix
?deconvolute
lo <- LinseedObject$new("GSE129240", samples=1:14, topGenes=10000)
library(tibble)
library(dplyr)
setwd("/home/alvaldeolivas/Desktop/Trabajo/Marseille/DeepWalkMultiplex/SelectDisease/")
GeneDisease <-
read.csv("curated_gene_disease_associations_MESH.csv", header = FALSE,
sep = " ", stringsAsFactors = FALSE)
colnames(GeneDisease) <- c("Gene","DiseaseID")
AllDiseasesBipartiteNetwork <- unique(GeneDisease$DiseaseID)
DiseaseNames <-
read.csv("MRCONSO_MSH_ICD10.csv", header = FALSE, sep = "\t",
stringsAsFactors = FALSE)
MultiplexDisease <- read.csv("multiplex_disease.csv", sep = " ",
header = FALSE, stringsAsFactors = FALSE)
AllDiseasesMultiplexNetwork <-
unique(c(MultiplexDisease$V2,MultiplexDisease$V3 ))
DiseasesNoGene <-
AllDiseasesMultiplexNetwork[which(!AllDiseasesMultiplexNetwork %in% AllDiseasesBipartiteNetwork)]
DiseaseNamesNoGene <- DiseaseNames %>%
dplyr::filter(V3 %in% DiseasesNoGene) %>%
dplyr::filter(V4 != "unknown")
NewFile <- read.csv("curated_gene_disease_associations.tsv", header = FALSE,
sep = "\t", stringsAsFactors = FALSE)
head(NewFile)
NewFile <- read.csv("curated_gene_disease_associations.tsv", header = TRUE,
sep = "\t", stringsAsFactors = FALSE)
head(NewFile)
dplyr::filter(NewFile, diseaseId == "D011371")
dplyr::filter(NewFile, geneSymbol == "WRN")
dplyr::filter(NewFile, geneSymbol == "LMNA")
DiseaseNames
head(DiseaseNames)
tail(DiseaseNames)
DiseasesNoGene <-
AllDiseasesMultiplexNetwork[which(!AllDiseasesMultiplexNetwork %in% AllDiseasesBipartiteNetwork)]
DiseasesNoGene
head(NewFile)
DiseasesNoGene %in% NewFile$diseaseId)
DiseasesNoGene %in% NewFile$diseaseId
sum(DiseasesNoGene %in% NewFile$diseaseId)
NewFile <- read.csv("curated_gene_disease_associations.tsv", header = TRUE,
sep = "\t", stringsAsFactors = FALSE)
head(NewFile)
dplyr::filter(NewFile, geneSymbol == "LMNA")
dplyr::filter(NewFile, diseaseId == "C0033300 ")
dplyr::filter(NewFile, diseaseId == "C0033300")
NewFile <- read.csv("curated_gene_disease_associations.tsv", header = TRUE,
sep = "\t", stringsAsFactors = FALSE) %>%
dplyr::select(geneSymbol, diseaseId, diseaseName)
NewFile
head(NewFile)
NewFile$geneSymbol
table(NewFile$geneSymbol)
table(sort(NewFile$geneSymbol))
sort(table(NewFile$geneSymbol))
sort(table(NewFile$geneSymbol), decreasing = TRUE)
## I need the disease mappings to conver to my new IDs
DiseaseMapping <- read.csv("disease_mappings (1).tsv", header = TRUE,
sep ="|", stringsAsFactors = FALSE)
head(DiseaseMapping)
table(DiseaseMapping)
table(DiseaseMapping$vocabulary)
## I need the disease mappings to conver to my new IDs
DiseaseMapping <- read.csv("disease_mappings (1).tsv", header = TRUE,
sep ="|", stringsAsFactors = FALSE) %>%
dplyr::filter(vocabulary == "MSH")
head(DiseaseMapping)
dplyr::filter(DiseaseMapping, diseaseId == "C0033300")
DiseaseNamesNoGene
?left_join
head(DiseaseNamesNoGene)
head(DiseaseMapping)
dplyr::left_join(DiseaseNamesNoGene, DiseaseMapping,
by = c("V3" = "code"))
dplyr::inner_join(DiseaseNamesNoGene, DiseaseMapping,
by = c("V3" = "code"))
CodeTransformNoGene <- dplyr::inner_join(DiseaseNamesNoGene, DiseaseMapping,
by = c("V3" = "code"))
head(CodeTransformNoGene)
NewFile
head(CodeTransformNoGene)
head(NewFile)
NewAssociations <- dplyr::inner_join(CodeTransformNoGene, diseaseId,
by = c("diseaseId" = "code"))
NewAssociations <- dplyr::inner_join(CodeTransformNoGene, NewFile,
by = c("diseaseId" = "diseaseId "))
heaD(CodeTransformNoGene)
head(CodeTransformNoGene)
colnames(NewFile)
NewAssociations <- dplyr::inner_join(CodeTransformNoGene, NewFile)
NewAssociations
dim(NewAssociations)
head(NewAssociations)
library(tibble)
library(dplyr)
rm(list=ls());cat('\014');if(length(dev.list()>0)){dev.off()}
library(tibble)
library(dplyr)
setwd("/home/alvaldeolivas/Desktop/Trabajo/Marseille/DeepWalkMultiplex/SelectDisease/")
GeneDisease <-
read.csv("curated_gene_disease_associations_MESH.csv", header = FALSE,
sep = " ", stringsAsFactors = FALSE)
colnames(GeneDisease) <- c("Gene","DiseaseID")
AllDiseasesBipartiteNetwork <- unique(GeneDisease$DiseaseID)
DiseaseNames <-
read.csv("MRCONSO_MSH_ICD10.csv", header = FALSE, sep = "\t",
stringsAsFactors = FALSE)
MultiplexDisease <- read.csv("multiplex_disease.csv", sep = " ",
header = FALSE, stringsAsFactors = FALSE)
AllDiseasesMultiplexNetwork <-
unique(c(MultiplexDisease$V2,MultiplexDisease$V3 ))
head(GeneDisease)
AllDiseasesMultiplexNetwork <-
unique(c(MultiplexDisease$V2,MultiplexDisease$V3 ))
head(GeneDisease)
head(AllDiseasesMultiplexNetwork)
head(GeneDisease)
## We keep only those diseses that are in the multiplex network
GeneDisease_MultiplexOld <- GeneDisease %>%
dplyr::filter(DiseaseID %in% AllDiseasesMultiplexNetwork)
dim(GeneDisease_MultiplexOld)
dim(GeneDisease)
## We keep only those diseses that are in the multiplex network
GeneDisease_MultiplexOld <- GeneDisease %>%
dplyr::filter(!(DiseaseID %in% AllDiseasesMultiplexNetwork))
heaD(GeneDisease_MultiplexOld)
head(GeneDisease_MultiplexOld)
dim(GeneDisease_MultiplexOld)
head(GeneDisease_MultiplexOld)
MultiplexDisease <- read.csv("multiplex_disease.csv", sep = " ",
header = FALSE, stringsAsFactors = FALSE)
head(MultiplexDisease)
AllDiseasesMultiplexNetwork <-
unique(c(MultiplexDisease$V2,MultiplexDisease$V3 ))
AllDiseasesMultiplexNetwork
## We keep only those diseses that are in the multiplex network
GeneDisease_MultiplexOld <- GeneDisease %>%
dplyr::filter(!(DiseaseID %in% AllDiseasesMultiplexNetwork))
## We keep only those diseses that are in the multiplex network
GeneDisease_MultiplexOld <- GeneDisease %>%
dplyr::filter(DiseaseID %in% AllDiseasesMultiplexNetwork)
dim(GeneDisease_MultiplexOld)
NewFile <- read.csv("curated_gene_disease_associations.tsv", header = TRUE,
sep = "\t", stringsAsFactors = FALSE) %>%
dplyr::select(geneSymbol, diseaseId, diseaseName)
NewFile <- read.csv("curated_gene_disease_associations.tsv", header = TRUE,
sep = "\t", stringsAsFactors = FALSE) %>%
dplyr::select(geneSymbol, diseaseId, diseaseName)
## I need the disease mappings to conver to my new IDs
DiseaseMapping <- read.csv("disease_mappings (1).tsv", header = TRUE,
sep ="|", stringsAsFactors = FALSE) %>%
dplyr::filter(vocabulary == "MSH")
head(NewFile)
head(DiseaseMapping)
head(DiseaseMapping)
dplyr::left_join(NewFile,DiseaseMapping, by = c("diseaseId" = "diseaseId")))
dplyr::left_join(NewFile,DiseaseMapping, by = c("diseaseId" = "diseaseId"))
GeneDiseaseMapping <-
dplyr::left_join(NewFile,DiseaseMapping, by = c("diseaseId" = "diseaseId"))
dim(GeneDiseaseMapping)
head(GeneDiseaseMapping)
GeneDiseaseMapping_InMultiplex <- GeneDiseaseMapping %>%
dplyr::filter(code %in% AllDiseasesMultiplexNetwork)
dim9GeneDiseaseMapping_InMultiplex
dim(GeneDiseaseMapping_InMultiplex)
head(GeneDiseaseMapping_InMultiplex)
GeneDisease_MultiplexOld
dim(GeneDisease_MultiplexOld)
heaD(GeneDisease_MultiplexOld)
head(GeneDisease_MultiplexOld)
head(GeneDiseaseMapping_InMultiplex)
dplyr::anti_join(GeneDiseaseMapping_InMultiplex, GeneDisease_MultiplexOld,
by = c("code" = "DiseaseID", "geneSymbol" = "Gene"))
dplyr::anti_join(GeneDiseaseMapping_InMultiplex, GeneDisease_MultiplexOld,
by = c("code" = "DiseaseID", "geneSymbol" = "Gene")) %>%
dplyr::select(geneSymbol, diseaseId, diseaseName, code) %>%
dplyr::rename(diseaseId = UMLS_CUI)
dplyr::anti_join(GeneDiseaseMapping_InMultiplex, GeneDisease_MultiplexOld,
by = c("code" = "DiseaseID", "geneSymbol" = "Gene")) %>%
dplyr::select(geneSymbol, diseaseId, diseaseName, code) %>%
dplyr::rename(UMLS_CUI = diseaseId)
FinalResults <-
dplyr::anti_join(GeneDiseaseMapping_InMultiplex, GeneDisease_MultiplexOld,
by = c("code" = "DiseaseID", "geneSymbol" = "Gene")) %>%
dplyr::select(geneSymbol, diseaseId, diseaseName, code) %>%
dplyr::rename(UMLS_CUI = diseaseId, MeSH_ID = code)
head(FinalResults)
FinalResults
colnames(GeneDisease )
dplyr::filter(GeneDisease, DiseaseID == "C566482")
dplyr::filter(GeneDisease, DiseaseID == "C2750246")
dplyr::filter(GeneDisease, DiseaseID == "C567593")
dplyr::filter(GeneDisease, DiseaseID == "C3494522")
dplyr::filter(GeneDisease, DiseaseID == "C538542")
dplyr::filter(GeneDisease, DiseaseID == "C566482")
dplyr::filter(GeneDisease, DiseaseID == "C567593")
dplyr::filter(GeneDisease, DiseaseID == "C538542")
"C566482" %in% AllDiseasesMultiplexNetwork
"C566482" %in% AllDiseasesBipartiteNetwork
"C567593" %in% AllDiseasesMultiplexNetwork
dplyr::filter(GeneDisease, DiseaseID == "C538542")
rm(list=ls());cat('\014');if(length(dev.list()>0)){dev.off()}
library(dplyr)
library(tidyr)
library(tibble)
library(progeny)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(cowplot)
library(grid)
rm(list=ls());cat('\014');if(length(dev.list()>0)){dev.off()}
library(dplyr)
library(tidyr)
library(tibble)
library(progeny)
library(ggplot2)
# library(gridExtra)
# library(ggpubr)
# library(cowplot)
# library(grid)
setwd("/home/alvaldeolivas/Documents/GitHub/Saezlab/Covid19/")
periodicGenes <-
read.csv(file = "RawData/human_periodic.tsv", header = TRUE,
sep= "\t", stringsAsFactors = FALSE) %>%
dplyr::filter(organism == "9606")
GenesPhase <- read.csv(file = "RawData/human_periodic_cellphase.csv",
header = TRUE, sep = "\t", stringsAsFactors = FALSE)
## Include parameter to select number of genes.
top <- 35 # Because one phase has only 36 related genes.
periodicGenes_HGNC <- periodicGenes %>%
dplyr::left_join(GenesPhase,  by = c("gene" = "Identifier")) %>%
dplyr::select(Matched.name, periodicity_pvalue, Peaktime) %>%
dplyr::mutate(LogPvalue = -log10(periodicity_pvalue)) %>%
dplyr::distinct(Matched.name, Peaktime,  .keep_all = TRUE) %>%
dplyr::group_by(Peaktime) %>%
dplyr::top_n(top, wt = LogPvalue) %>%
dplyr::ungroup(Peaktime) %>%
dplyr::select(-periodicity_pvalue) %>%
tidyr::spread(Peaktime, LogPvalue, fill=0) %>%
data.frame(row.names = 1, check.names = FALSE, stringsAsFactors = FALSE)
periodicGenes_HGNC_Norm <- apply(periodicGenes_HGNC, 2, function(x) x/sum(x))
periodicGenes_HGNC_NormCiber <- periodicGenes_HGNC_Norm %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "GeneID")
write.table(periodicGenes_HGNC_NormCiber,
"IntermediateFiles/Signaturematrix_Periodic.txt",
append = FALSE, sep = "\t", dec = ".",
row.names = F, col.names = T, quote = F)
normCountsCALU3 <- readRDS("IntermediateFiles/counts_norm_CALU3vsCOV2.rds") %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "GeneID")
write.table(normCountsCALU3, "IntermediateFiles/ExpressionCALU3_CIBER.txt",
append = FALSE, sep = "\t", dec = ".",
row.names = F, col.names = T, quote = F)
normCountsNHBE <- readRDS("IntermediateFiles/counts_norm_NHBEvsCOV2.rds") %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "GeneID")
write.table(normCountsNHBE, "IntermediateFiles/ExpressionNHBE_CIBER.txt",
append = FALSE, sep = "\t", dec = ".",
row.names = F, col.names = T, quote = F)
################### CALU-3
dds_CALU3vsCOV2 <- readRDS("IntermediateFiles/dds_results_CALU3vsCOV2.rds")
dds_CALU3vsCOV2_df <- as.data.frame(dds_CALU3vsCOV2) %>%
rownames_to_column(var = "GeneID") %>%
dplyr::select(GeneID, stat) %>%
dplyr::filter(!is.na(stat)) %>%
column_to_rownames(var = "GeneID")
expr <-
data.frame(names = row.names(dds_CALU3vsCOV2_df), row.names = NULL, dds_CALU3vsCOV2_df)
model <-
data.frame(names = row.names(periodicGenes_HGNC_Norm), row.names = NULL, periodicGenes_HGNC_Norm)
results_CALU3 <- progenyPerm(expr, model, k = 10000, z_scores = TRUE) %>%
t()
colnames(results_CALU3) <- "NES"
Cycle_CALU3vsCOV2_zscore_df <- as.data.frame(results_CALU3) %>%
rownames_to_column(var = "Stage") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Stage = factor(Stage))
plot_CALU3 <-
ggplot(Cycle_CALU3vsCOV2_zscore_df,aes(x = reorder(Stage, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Cell Cycle Stage") +
labs(title = "CALU-3") +
theme(legend.position = "none")
################### NHBE
dds_NHBEvsCOV2 <- readRDS("IntermediateFiles/dds_results_NHBEvsCOV2.rds")
dds_NHBEvsCOV2_df <- as.data.frame(dds_NHBEvsCOV2) %>%
rownames_to_column(var = "GeneID") %>%
dplyr::select(GeneID, stat) %>%
dplyr::filter(!is.na(stat)) %>%
column_to_rownames(var = "GeneID")
expr <-
data.frame(names = row.names(dds_NHBEvsCOV2_df), row.names = NULL, dds_NHBEvsCOV2_df)
model <-
data.frame(names = row.names(periodicGenes_HGNC_Norm), row.names = NULL, periodicGenes_HGNC_Norm)
results_NHBE <- progenyPerm(expr, model, k = 10000, z_scores = TRUE) %>%
t()
colnames(results_NHBE) <- "NES"
Cycle_NHBEvsCOV2_zscore_df <- as.data.frame(results_NHBE) %>%
rownames_to_column(var = "Stage") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Stage = factor(Stage))
plot_NHBE <-
ggplot(Cycle_NHBEvsCOV2_zscore_df,aes(x = reorder(Stage, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0 ) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Cell Cycle Stage")  +
labs(title = "NHBE") +
theme(legend.position = "none")
################### A549
dds_A549vsCOV2 <- readRDS("IntermediateFiles/dds_results_A549vsCOV2.rds")
dds_A549vsCOV2_df <- as.data.frame(dds_A549vsCOV2) %>%
rownames_to_column(var = "GeneID") %>%
dplyr::select(GeneID, stat) %>%
dplyr::filter(!is.na(stat)) %>%
column_to_rownames(var = "GeneID")
expr <-
data.frame(names = row.names(dds_A549vsCOV2_df), row.names = NULL, dds_A549vsCOV2_df)
model <-
data.frame(names = row.names(periodicGenes_HGNC_Norm), row.names = NULL, periodicGenes_HGNC_Norm)
results_A549 <- progenyPerm(expr, model, k = 10000, z_scores = TRUE) %>%
t()
colnames(results_A549) <- "NES"
Cycle_A549vsCOV2_zscore_df <- as.data.frame(results_A549) %>%
rownames_to_column(var = "Stage") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Stage = factor(Stage))
plot_A549 <-
ggplot(Cycle_A549vsCOV2_zscore_df,aes(x = reorder(Stage, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Cell Cycle Stage") +
labs(title = "A549") +
theme(legend.position = "none")
################### A549 transduced by ACE2
dds_A549ACE2vsCOV2 <- readRDS("IntermediateFiles/dds_results_A549ACE2vsCOV2.rds")
dds_A549ACE2vsCOV2_df <- as.data.frame(dds_A549ACE2vsCOV2) %>%
rownames_to_column(var = "GeneID") %>%
dplyr::select(GeneID, stat) %>%
dplyr::filter(!is.na(stat)) %>%
column_to_rownames(var = "GeneID")
expr <-
data.frame(names = row.names(dds_A549ACE2vsCOV2_df), row.names = NULL, dds_A549ACE2vsCOV2_df)
model <-
data.frame(names = row.names(periodicGenes_HGNC_Norm), row.names = NULL, periodicGenes_HGNC_Norm)
results_A549ACE2 <- progenyPerm(expr, model, k = 10000, z_scores = TRUE) %>%
t()
colnames(results_A549ACE2) <- "NES"
Cycle_A549ACE2vsCOV2_zscore_df <- as.data.frame(results_A549ACE2) %>%
rownames_to_column(var = "Stage") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Stage = factor(Stage))
plot_A549ACE2<-
ggplot(Cycle_A549ACE2vsCOV2_zscore_df,aes(x = reorder(Stage, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Cell Cycle Stage") +
labs(title = "A549_ACE2")
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] +
theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x +
theme(legend.position = "none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend, ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
grid_arrange_shared_legend(plot_NHBE, plot_CALU3, plot_A549, plot_A549ACE2, ncol =2, nrow = 2)
####
Cycle_NHBEvsCOV2_zscore_df<- Cycle_NHBEvsCOV2_zscore_df %>%
add_column(cellLine = "NHBE")
Cycle_CALU3vsCOV2_zscore_df<- Cycle_CALU3vsCOV2_zscore_df %>%
add_column(cellLine = "CALU-3")
Cycle_A549vsCOV2_zscore_df<- Cycle_A549vsCOV2_zscore_df %>%
add_column(cellLine = "A549")
Cycle_A549ACE2vsCOV2_zscore_df<- Cycle_A549ACE2vsCOV2_zscore_df %>%
add_column(cellLine = "A549_ACE2")
All_Lines <- bind_rows(Cycle_NHBEvsCOV2_zscore_df, Cycle_CALU3vsCOV2_zscore_df,
Cycle_A549vsCOV2_zscore_df,Cycle_A549ACE2vsCOV2_zscore_df)
ggplot(All_Lines,aes(x = Stage, y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
facet_wrap(~cellLine) +
scale_fill_gradient2(low = "darkblue", high = "darkred",
mid = "whitesmoke", midpoint = 0) +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Cell Cycle Stage")
